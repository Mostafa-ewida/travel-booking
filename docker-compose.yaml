services:
  backend:
    build:
      context: ./code/backend
      dockerfile: Dockerfile
    image: mostafaewida/fixed_backend
    ports:
      - "8000:8000"
    environment:
      - MONGO_URI=mongodb://lclr_user:1th4ok1ymfurQaM9@mongo:27017/lclr_db?authSource=lclr_db
      - REDIS_URL=redis://:hgdfwegf67435jsdbjkTY@redis:6379
      - RABBITMQ_URL=amqp://bugs-bunny:sdfjgh45iotgdfjk456@rabbitmq:5672
      - KEYCLOAK_URL=http://keycloak:8080
      - KEYCLOAK_ADMIN=mostafa
      - KEYCLOAK_ADMIN_PASSWORD=7eg35sJFHE366dgwfIQueuiKDJ837473KSOWEIhffhrWDbdjh
      # - KEYCLOAK_CLIENT_ID=travel-api
      # - KEYCLOAK_REALM=travel-realm
      # - KEYCLOAK_CLIENT_ID=travel-api
      # - KEYCLOAK_CLIENT_SECRET=your-strong-secret-here
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=admin
      - MINIO_SECRET_KEY=minio-root
      - ELASTIC_APM_SERVER_URL=http://apm-server:8200
      - ELASTIC_APM_SERVICE_NAME=travel-booking-api
    depends_on:
      - redis
      - rabbitmq
      - keycloak
      - minio
      # - apm-server
      - mongo

  frontend:
    image: mostafaewida/fixed_frontend
    ports:
      - "80:80"
    environment:
      - REACT_APP_API_URL=http://backend:8000
      - REACT_APP_KEYCLOAK_URL=http://keycloak:8080
      - REACT_APP_KEYCLOAK_REALM=travel-realm
      - REACT_APP_KEYCLOAK_CLIENT_ID=travel-api
    depends_on:
      - backend


  mongo:
    image: mongo:6.0
    container_name: mongo
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpass
    volumes:
      - mongo_data:/data/db
      - ./init-db.js:/docker-entrypoint-initdb.d/init.js

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass hgdfwegf67435jsdbjkTY
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: bugs-bunny
      RABBITMQ_DEFAULT_PASS: sdfjgh45iotgdfjk456
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data

  keycloak:
    image: quay.io/keycloak/keycloak:21.1
    command: start-dev 
    environment:
      KEYCLOAK_ADMIN: mostafa
      KEYCLOAK_ADMIN_PASSWORD: 7eg35sJFHE366dgwfIQueuiKDJ837473KSOWEIhffhrWDbdjh
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: password
    ports:
      - "8080:8080"
    depends_on:
      - postgres

  minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: minio-root
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data

 
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ xelastic == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ xkibana == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:elastic" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"kibana\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120



  es01:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    environment:
      - node.name=es01
      - cluster.name=docker-cluster
      - discovery.type=single-node
      - ELASTIC_PASSWORD=elastic
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=basic
      - xpack.ml.use_auto_machine_memory_percent=true
    mem_limit: 1073741824
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120


  kibana:
    depends_on:
      es01:
        condition: service_healthy

    image: docker.elastic.co/kibana/kibana:8.10.2
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    ports:
      - 5601:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=kibana
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    mem_limit: 1073741824
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120


volumes:
  redis_data:
  postgres_data:
  minio_data:
  rabbitmq_data:
  es_data:
  mongo_data:
  certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local